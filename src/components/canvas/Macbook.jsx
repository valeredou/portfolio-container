'use client'

import * as THREE from 'three'
import React, { Suspense, useEffect, useRef, useState } from 'react'
import { Canvas, useFrame } from '@react-three/fiber'
import { Environment, useGLTF, ContactShadows, Html, OrbitControls, Box } from '@react-three/drei'
import { useSpring } from '@react-spring/core'
import { a as three } from '@react-spring/three'
import { a as web } from '@react-spring/web'

export default function Macbook({ open, setOpen, hinge, ...props }) {
  const group = useRef()
  // Load model
  const { nodes, materials } = useGLTF('/mac-draco.glb')

  // Take care of cursor state on hover
  const [hovered, setHovered] = useState(false)

  //Able or disable movement
  const [movement, setMovement] = useState(true)

  //Vectors for camera move
  const dummy = new THREE.Vector3()
  const lookAtPos = new THREE.Vector3()

  useEffect(() => void (document.body.style.cursor = hovered ? 'pointer' : 'auto'), [hovered])
  // Make it float in the air when it's opened
  useFrame((state) => {
    const t = state.clock.getElapsedTime()

    if (movement) {
      // group.current.rotation.x = THREE.MathUtils.lerp(
      //   group.current.rotation.x,
      //   open ? Math.cos(t / 10) / 10 + 0.25 : 0,
      //   0.1,
      // )
      // group.current.rotation.y = THREE.MathUtils.lerp(group.current.rotation.y, open ? Math.sin(t / 10) / 100 : 0, 0.1)
      // group.current.rotation.z = THREE.MathUtils.lerp(group.current.rotation.z, open ? Math.sin(t / 10) / 100 : 0, 0.1)
      group.current.position.y = THREE.MathUtils.lerp(group.current.position.y, open ? -2.5 : -4.3, 0.1)
    } else {
      group.current.position.y = THREE.MathUtils.lerp(group.current.position.y, open ? -2 : -4.3, 0.1)
      group.current.rotation.y = THREE.MathUtils.lerp(group.current.rotation.y, 0, 0.1)
      group.current.rotation.z = THREE.MathUtils.lerp(group.current.rotation.z, 0, 0.1)
      group.current.position.y = THREE.MathUtils.lerp(group.current.position.y, 0, 0.1)
    }

    const step = 0.1
    state.camera.position.lerp(dummy.set(1, open ? 2 : 0, open ? -8.75 : -30), step)

    lookAtPos.x = 0
    lookAtPos.y = 0
    lookAtPos.z = 0

    state.camera.lookAt(lookAtPos)
    state.camera.updateProjectionMatrix()
  })
  // The view was auto-generated by: https://github.com/pmndrs/gltfjsx
  // Events and spring animations were added afterwards
  return (
    <group
      ref={group}
      {...props}
      onPointerOver={(e) => setHovered(true)}
      onPointerOut={(e) => setHovered(false)}
      dispose={null}
    >
      <three.group rotation-x={hinge} position={[0, -0.04, 0.41]}>
        <group position={[0, 2.96, -0.13]} rotation={[Math.PI / 2, 0, 0]}>
          <mesh material={materials.aluminium} geometry={nodes['Cube008'].geometry} />
          <mesh material={materials['matte.001']} geometry={nodes['Cube008_1'].geometry} />
          <mesh material={materials['screen.001']} geometry={nodes['Cube008_2'].geometry}>
            <Html
              className='htmlScreen'
              rotation-x={-Math.PI / 2}
              position={[0, 0.05, -0.09]}
              // distanceFactor={3.3}
              distanceFactor={2}
              transform
              occlude='blending'
              pointerEvents={open ? 'initial' : 'none'}
            >
              <div className='wrapper'>
                <iframe src='https://portfolio.valeredouille.com' />
              </div>
            </Html>
          </mesh>
        </group>
      </three.group>
      <mesh material={materials.keys} geometry={nodes.keyboard.geometry} position={[1.79, 0, 3.45]} />
      <group position={[0, -0.1, 3.39]}>
        <mesh material={materials.aluminium} geometry={nodes['Cube002'].geometry} />
        <mesh material={materials.trackpad} geometry={nodes['Cube002_1'].geometry} />
      </group>
      <mesh material={materials.touchbar} geometry={nodes.touchbar.geometry} position={[0, -0.03, 1.2]}>
        <Html
          transform
          occlude='blending'
          rotation={[-Math.PI / 2, 0, 0]}
          position={[-2.35, 0.05, 0]}
          className='touchbar'
          distanceFactor={3}
        >
          <div
            className='esc'
            onPointerOver={(e) => setHovered(true)}
            onPointerOut={(e) => setHovered(false)}
            onClick={() => setOpen(!open)}
          >
            {'esc'}
          </div>
          <div
            className='movement'
            onPointerOver={(e) => setHovered(true)}
            onPointerOut={(e) => setHovered(false)}
            onClick={() => setMovement(!movement)}
          >
            {movement ? 'Disable movement' : 'Enable movement'}
          </div>
        </Html>
      </mesh>
    </group>
  )
}
